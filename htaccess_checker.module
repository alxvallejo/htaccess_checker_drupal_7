<?php

/**
 * Implements hook_menu().
 */
function htaccess_checker_menu() {
  $items = array();
  $items['admin/config/search/htaccess_check'] = array(
    'title' => t('Htaccess Checker'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htaccess_checker_admin'),
  );
  return $items;
}

/**
 * Implements hook_admin_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function htaccess_checker_form_htaccess_checker_admin_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'htaccess_checker_theme_form';
}

/**
 * Additional theming components for the admin page.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function htaccess_checker_theme_form(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module','htaccess_checker') . '/css/htaccess_checker-form.css');
  drupal_add_css(drupal_get_path('module','htaccess_checker') . '/datatables/datatables.min.css');
  drupal_add_js(drupal_get_path('module','htaccess_checker') . '/datatables/datatables.min.js');
  drupal_add_js(drupal_get_path('module','htaccess_checker') . '/js/table.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Theme callback function for htaccess_checker_theme().
 *
 * @param $vars
 * @return string
 */
function theme_htaccess_checker_redirects($vars) {
  $element = $vars['element'];
  $table = array(
    '#theme' => 'table',
    '#header' => array(
      array('data' => t('Source')),
      array('data' => t('Target')),
      array('data' => t('Pass/Fail')),
    ),
    '#rows' => array(),
  );
  // build redirects array
  $redirects = array();
  $options = element_children($element);
  $redirect_count = count($options) / 2;
  for ($i = 0; $i < $redirect_count; $i++) {
    $redirects[$i]['source'] = $element['source_' . $i];
    $redirects[$i]['target'] = $element['target_' . $i];
  }
  foreach ($redirects as $i => $redirect) {
    $table['#rows'][] = array(
      drupal_render($redirect['source']),
      drupal_render($redirect['target']),
      array('data' => '<div id="result_' . $i . '"></div>'),
    );
  }
  // add custom table attributes
  $table['#attributes'] = array('class' => array(''));
  return render($table);
}

/**
 * Theme hook for styling the htaccess_checker_redirects field.
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function htaccess_checker_theme($existing, $type, $theme, $path) {
  $templates = array();
  $templates['htaccess_checker_redirects'] = array(
    'render element' => 'element',
  );
  return $templates;
}

/**
 * Form callback for the htaccess_checker admin page.
 *
 * @param $form
 * @param $form_state
 * @return system_settings_form
 */
function htaccess_checker_admin($form, &$form_state) {
  $form = array();

  $form['htaccess_csv_upload'] = array(
    '#type' => 'file',
  );

  $form['#prefix'] = '<div id="htaccess-check">';
  $form['#suffix'] = '</div>';

  // Use a custom theme function for the redirects option
  // which returns a table
  $form['htaccess_checker_redirects'] = array(
    '#tree' => TRUE,
    '#theme' => 'htaccess_checker_redirects',
    '#prefix' => '<div id="htaccess-checker-redirect-table">',
    '#suffix' => '</div>',
  );

  $redirects = variable_get('htaccess_checker_redirects');

  if (isset($form_state['redirect_count'])) {
    $row_count = $form_state['redirect_count'];
  }
  else {
    if (!$redirects) {
      $row_count = 1;
    }
    else {
      $row_count = count($redirects) / 2;
    }
    $form_state['redirect_count'] = $row_count;
  }

  for ($i = 0; $i < $row_count; $i++) {
    $form['htaccess_checker_redirects']['source_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => isset($redirects['source_' . $i]) ? $redirects['source_' . $i] : '',
      '#size' => 60,
      '#maxlength' => 128,
    );
    $form['htaccess_checker_redirects']['target_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => isset($redirects['source_' . $i]) ? $redirects['target_' . $i] : '',
      '#size' => 60,
      '#maxlength' => 128,
    );
  }

  $form['add_row'] = array(
    //'#markup' => '<input type="submit" id="add-row" class="form-submit" value="Add Row">',
    '#type' => 'submit',
    '#value' => t('Add Row'),
    '#submit' => array('htaccess_checker_add_row_submit'),
    '#ajax' => array(
      'callback' => 'htaccess_checker_add_row_callback',
      'wrapper' => 'htaccess-checker-redirect-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['check_table'] = array(
    '#type' => 'submit',
    '#value' => t('Test Redirects'),
    '#ajax' => array(
      'callback' => 'htaccess_checker_table_submit',
      'wrapper' => 'htaccess-checker-redirect-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return system_settings_form($form);
}

/**
 * Ajax callback on the add_row form button.
 * This is called after the submit handler to rebuild part of the form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function htaccess_checker_add_row_callback($form, &$form_state) {
  return $form['htaccess_checker_redirects'];
}

/**
 * Submit handler for add_row form button
 * Increments the redirect count before rebuilding the form.
 *
 * @param $form
 * @param $form_state
 */
function htaccess_checker_add_row_submit($form, &$form_state) {
  if (isset($form_state['redirect_count'])) {
    $form_state['redirect_count']++;
  }
  else {
    $form_state['redirect_count'] = 1;
  }
  $form_state['rebuild'] = TRUE;
}

function htaccess_checker_table_submit(&$form, $form_state) {
  $commands = array();
  $options = element_children($form['htaccess_checker_redirects']);
  $count = count($options) / 2;
  $redirects = array();
  for ($i = 0; $i < $count; $i++) {
    // Loop through each pair and perform the curl request
    $redirects[$i]['source'] = $form['htaccess_checker_redirects']['source_' . $i]['#value'];
    $redirects[$i]['target'] = $form['htaccess_checker_redirects']['target_' . $i]['#value'];
  }
  if (empty($redirects)) {
    $commands[] = ajax_command_append('#htaccess-checker-redirect-table', 'No redirects saved.');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  foreach($redirects as $i => $redirect) {
    $src = $redirect['source'];
    $tgt = $redirect['target'];
    $headers = array(
      'Host: ' . $src
    );
    $curl = curl_init();
    curl_setopt($curl,CURLOPT_HTTPHEADER,$headers);
    curl_setopt($curl,CURLOPT_URL,$tgt);
    curl_setopt($curl,CURLINFO_HEADER_OUT,true);
    curl_setopt($curl,CURLOPT_RETURNTRANSFER,true);
    $result = curl_exec($curl);
    $curl_header_sent = curl_getinfo($curl,CURLINFO_HEADER_OUT);
    $curl_effective_url = curl_getinfo($curl,CURLINFO_EFFECTIVE_URL);
    if (substr($tgt, -1) !== '/') {
      $tgt = $tgt . '/';
    }
    if (substr($curl_effective_url, -1) !== '/') {
      $curl_effective_url = $curl_effective_url . '/';
    }
    // String comparison
    if ($tgt == $curl_effective_url) {
      $commands[] = ajax_command_append('#result_' . $i, 'Success');
    }
    elseif ($src == $curl_effective_url) {
      $commands[] = ajax_command_append('#result_' . $i, 'No Redirect');
    }
    else {
      $commands[] = ajax_command_append('#result_' . $i, 'Fail: Redirected to ' . $curl_effective_url);
    }
  }
  curl_close($curl);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Callback for htaccess checker form CSV.
 *
 * @param $form
 * @param $form_state
 */
function htaccess_checker_callback(&$form, $form_state) {

  if ($errors = form_get_errors()) {
    return $form;
  }

  // setup redirects list
  $redirects = array();
  $redirect_count = 0;

  // setup ajax commands array
  $commands = array();

  // save file to temp dir
  $file = file_save_upload('htaccess_csv_upload', array('file_validate_extensions' => array('csv')), "temporary://", $replace = FILE_EXISTS_REPLACE);
  if ($file) {
    $row = 0;
    // deal with mac line endings (from http://php.net/manual/en/function.fgetcsv.php#87196)
    ini_set('auto_detect_line_endings',TRUE);
    if (($handle = fopen($file->uri, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 500, ",")) !== FALSE) {
        $redirects[$row]['src'] = $data[0];
        $redirects[$row]['tgt'] = $data[1];
        $row++;
        $redirect_count++;
      }
      fclose($handle);
    }
    ini_set('auto_detect_line_endings',FALSE);

    //$num_redirects = count($redirects);
    $successful_redirects = 0;
    $no_redirects = array();
    $wrong_redirects = array();

    foreach ($redirects as $i => $redirect) {
      $src = $redirect['src'];
      $tgt = $redirect['tgt'];
      // set up headers
      $headers = array(
        'Host: ' . $src
      );
      //header("Host: " . $src);
      // curl
      $curl = curl_init();
      curl_setopt($curl,CURLOPT_HTTPHEADER,$headers);
      curl_setopt($curl,CURLOPT_URL,$tgt);
      //curl_setopt($curl,CURLOPT_HEADER,true);
      curl_setopt($curl,CURLINFO_HEADER_OUT,true);
      curl_setopt($curl,CURLOPT_RETURNTRANSFER,true);
      $result = curl_exec($curl);
      $curl_header_sent = curl_getinfo($curl,CURLINFO_HEADER_OUT);
      $curl_effective_url = curl_getinfo($curl,CURLINFO_EFFECTIVE_URL);

      // The effective url will have a trailing slash.
      // Make sure the target also gets the slash for a valid comparison

      if (substr($tgt, -1) !== '/') {
        $tgt = $tgt . '/';
      }

      if (substr($curl_effective_url, -1) !== '/') {
        $curl_effective_url = $curl_effective_url . '/';
      }

      // String comparison
      if ($tgt == $curl_effective_url) {
        $successful_redirects++;
      }
      elseif ($src == $curl_effective_url) {
        $no_redirects[$i]['src'] = $src;
        $no_redirects[$i]['tgt'] = $tgt;
        $no_redirects[$i]['effective'] = $curl_effective_url;
      }
      else {
        $wrong_redirects[$i]['src'] = $src;
        $wrong_redirects[$i]['tgt'] = $tgt;
        $wrong_redirects[$i]['effective'] = $curl_effective_url;
      }
    }
    curl_close($curl);

    // Redirect count
    $commands[] = ajax_command_append('#htaccess-check', $redirect_count . ' redirects found in file ' . $file->filename);

    // Format response
    $successful_report = '<div class="success-redirects"><span class="success">' . $successful_redirects . '</span> redirects tested successfully.</div>';
    $commands[] = ajax_command_append('#htaccess-check', $successful_report);

    // No redirects report
    if (!empty($no_redirects)) {
      $no_redirect_report = array();
      foreach ($no_redirects as $i => $no_redirect) {
        $no_redirect_report[] = '<div class="no-redirects"><span class="src">' . $no_redirect['src'] . '</span> failed to redirect to <span class="tgt">' . $no_redirect['tgt'] . '</span> and instead redirected to <span class="effective">' . $no_redirect['effective'] . '</span></div>';
      }
      $commands[] = ajax_command_append('#htaccess-check', implode('',$no_redirect_report));
    }

    // Wrong redirects report
    if (!empty($wrong_redirects)) {
      $wrong_redirect_report = array();
      foreach ($wrong_redirects as $i => $wrong_redirect) {
        $wrong_redirect_report[] = '<div class="wrong-redirects"><span class="src">' . $wrong_redirect['src'] . '</span> failed to redirect to <span class="tgt">' . $wrong_redirect['tgt'] . '</span> and instead redirected to <span class="effective">' . $wrong_redirect['effective'] . '</span></div>';
      }
      $commands[] = ajax_command_append('#htaccess-check', implode('',$wrong_redirect_report));
    }

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $commands[] = ajax_command_append('#htaccess-check', 'No file uploaded.');
  }
}

function htaccess_checker_check_redirect($source, $target) {

}
