<?php

/**
 * Implements hook_menu().
 */
function htaccess_checker_menu() {
  $items = array();
  $items['admin/config/search/htaccess_check'] = array(
    'title' => t('Htaccess Checker'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htaccess_checker_admin'),
  );
  $items['admin/config/search/htaccess_check/redirects'] = array(
    'title' => t('Redirects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/search/htaccess_check/settings'] = array(
    'title' => t('Settings'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htaccess_checker_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_admin_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function htaccess_checker_form_htaccess_checker_admin_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'htaccess_checker_theme_form';
}

/**
 * Additional theming components for the admin page.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function htaccess_checker_theme_form(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module','htaccess_checker') . '/css/htaccess_checker-form.css');
  drupal_add_css(drupal_get_path('module','htaccess_checker') . '/datatables/datatables.min.css');
  drupal_add_js(drupal_get_path('module','htaccess_checker') . '/datatables/datatables.min.js');
  drupal_add_js(drupal_get_path('module','htaccess_checker') . '/js/table.js', array('scope' => 'footer'));
  return $form;
}

function htaccess_checker_settings($form, &$form_state) {
  $form = array();
  $languages = language_list('enabled')[1];
  $form['htaccess_checker_domains'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('URL Domains'),
    '#description' => t('List any custom language domains that aren\'t set in Drupal\'s domain registry. This will provide the {lang-domain} token replacement for testing.'),
  );
  $options = variable_get('htaccess_checker_domains');
  foreach ($languages as $lang) {
    $form['htaccess_checker_domains'][$lang->language] = array(
      '#type' => 'textfield',
      '#title' => $lang->name,
      '#default_value' => isset($options[$lang->language]) ? $options[$lang->language] : '',
      '#size' => '12',
      '#maxsize' => '12',
      '#attributes' => array('class' => array('container-inline')),
    );
  }
  return system_settings_form($form);
}

/**
 * Theme callback function for htaccess_checker_theme().
 *
 * @param $vars
 * @return string
 */
function theme_htaccess_checker_redirects($vars) {
  $element = $vars['element'];
  $table = array(
    '#theme' => 'table',
    '#header' => array(
      array('data' => t('Source')),
      array('data' => t('Target')),
      array('data' => t('Pass/Fail')),
    ),
    '#rows' => array(),
  );
  // build redirects array
  $redirects = array();
  $options = element_children($element);
  $redirect_count = count($options) / 2;
  for ($i = 0; $i < $redirect_count; $i++) {
    $redirects[$i]['source'] = $element['source_' . $i];
    $redirects[$i]['target'] = $element['target_' . $i];
  }
  foreach ($redirects as $i => $redirect) {
    $table['#rows'][] = array(
      drupal_render($redirect['source']),
      drupal_render($redirect['target']),
      array('data' => '<div id="result_' . $i . '"></div>'),
    );
  }
  // add custom table attributes
  $table['#attributes'] = array('class' => array(''));
  return render($table);
}

/**
 * Theme hook for styling the htaccess_checker_redirects field.
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function htaccess_checker_theme($existing, $type, $theme, $path) {
  $templates = array();
  $templates['htaccess_checker_redirects'] = array(
    'render element' => 'element',
  );
  return $templates;
}

/**
 * Form callback for the htaccess_checker admin page.
 *
 * @param $form
 * @param $form_state
 * @return system_settings_form
 */
function htaccess_checker_admin($form, &$form_state) {
  $form = array();

  /*$form['htaccess_csv_upload'] = array(
    '#type' => 'file',
  );*/

  $form['#prefix'] = '<div id="htaccess-check">';
  $form['#suffix'] = '</div>';

  // Use a custom theme function for the redirects option
  // which returns a table
  $form['htaccess_checker_redirects'] = array(
    '#tree' => TRUE,
    '#theme' => 'htaccess_checker_redirects',
    '#prefix' => '<div id="htaccess-checker-redirect-table">',
    '#suffix' => '</div>',
  );

  $redirects = variable_get('htaccess_checker_redirects');

  if (isset($form_state['redirect_count'])) {
    $row_count = $form_state['redirect_count'];
  }
  else {
    if (!$redirects) {
      $row_count = 1;
    }
    else {
      $row_count = count($redirects) / 2;
    }
    $form_state['redirect_count'] = $row_count;
  }

  for ($i = 0; $i < $row_count; $i++) {
    $form['htaccess_checker_redirects']['source_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => isset($redirects['source_' . $i]) ? $redirects['source_' . $i] : '',
      '#size' => 60,
      '#maxlength' => 128,
    );
    $form['htaccess_checker_redirects']['target_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => isset($redirects['source_' . $i]) ? $redirects['target_' . $i] : '',
      '#size' => 60,
      '#maxlength' => 128,
    );
  }

  $form['add_row'] = array(
    //'#markup' => '<input type="submit" id="add-row" class="form-submit" value="Add Row">',
    '#type' => 'submit',
    '#value' => t('Add Row'),
    '#submit' => array('htaccess_checker_add_row_submit'),
    '#ajax' => array(
      'callback' => 'htaccess_checker_add_row_callback',
      'wrapper' => 'htaccess-checker-redirect-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['check_table'] = array(
    '#type' => 'submit',
    '#value' => t('Test Redirects'),
    '#ajax' => array(
      'callback' => 'htaccess_checker_table_submit',
      'wrapper' => 'htaccess-checker-redirect-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return system_settings_form($form);
}

/**
 * Ajax callback on the add_row form button.
 * This is called after the submit handler to rebuild part of the form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function htaccess_checker_add_row_callback($form, &$form_state) {
  return $form['htaccess_checker_redirects'];
}

/**
 * Submit handler for add_row form button
 * Increments the redirect count before rebuilding the form.
 *
 * @param $form
 * @param $form_state
 */
function htaccess_checker_add_row_submit($form, &$form_state) {
  if (isset($form_state['redirect_count'])) {
    $form_state['redirect_count']++;
  }
  else {
    $form_state['redirect_count'] = 1;
  }
  $form_state['rebuild'] = TRUE;
}

function htaccess_checker_table_submit(&$form, $form_state) {
  $commands = array();
  $options = element_children($form['htaccess_checker_redirects']);
  $count = count($options) / 2;
  $redirects = array();
  for ($i = 0; $i < $count; $i++) {
    // Loop through each pair and perform the curl request
    $redirects[$i]['source'] = $form['htaccess_checker_redirects']['source_' . $i]['#value'];
    $redirects[$i]['target'] = $form['htaccess_checker_redirects']['target_' . $i]['#value'];
  }
  if (empty($redirects)) {
    $commands[] = ajax_command_append('#htaccess-checker-redirect-table', 'No redirects saved.');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }

  foreach($redirects as $i => $redirect) {
    $src = $redirect['source'];
    $tgt = $redirect['target'];
    if (empty($src) && empty($tgt)) {
      continue;
    }

    // Start result list
    $commands[] = ajax_command_append('#result_' . $i, '<ul>');

    // Check for string replacements and, if found, loop through the new array
    if ($test_array = htaccess_checker_string_replace($src, $tgt)) {
      foreach ($test_array as $test) {
        htaccess_checker_result_compare($test['src'], $test['tgt'], $commands, $i);
      }
    }
    else {
      htaccess_checker_result_compare($src, $tgt, $commands, $i);
    }

    // End result list
    $commands[] = ajax_command_append('#result_' . $i, '</ul>');
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Ajax callback for returning the Location header from a curl request
 * If there is a redirect, call this function recursively on the new location.
 *
 * @param $src
 * @param $tgt
 * @return mixed
 */
function htaccess_checker_check_redirect($src, $redirect_counter = 0) {
  // Stop redirect checking after a max setting
  if (4 == $redirect_counter) {
    $response['error'] = t('Too many redirects for ' . $src . '.');
    return $response;
  }
  $hostname = parse_url($src, PHP_URL_HOST);
  $headers = array('Host: ' . $hostname);
  $protocol = substr($src,0,5) == 'https' ? 'https' : 'http';
  $curl = curl_init($src);
  $response = array();
  // Set header
  curl_setopt($curl,CURLOPT_HTTPHEADER,$headers);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);

  $port = ('https' == $protocol) ? '443' : '80';

  $resolve = array(sprintf(
    "%s:%d:%s",
    $hostname,
    $port,
    '127.0.0.1'
  ));
  curl_setopt($curl, CURLOPT_RESOLVE, $resolve);

  // Set referer
  //curl_setopt($curl,CURLOPT_REFERER,$src);
  // Set destination url
  //curl_setopt($curl,CURLOPT_URL,$src);
  // Set a max redirects allowed
  // Track the handle's request string
  curl_setopt($curl,CURLINFO_HEADER_OUT,TRUE);
  // Return the value
  curl_setopt($curl,CURLOPT_RETURNTRANSFER,TRUE);
  // Include the header in the response
  curl_setopt($curl,CURLOPT_HEADER,TRUE);
  // Exclude the Body
  curl_setopt($curl,CURLOPT_NOBODY,TRUE);
  // Recursively follow redirects
  //curl_setopt($curl,CURLOPT_FOLLOWLOCATION,1);
  // Set referer on redirect
  curl_setopt($curl,CURLOPT_AUTOREFERER,TRUE);
  curl_setopt($curl,CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.0.3705; .NET CLR 1.1.4322)');
  $result = curl_exec($curl);
  $request_header = curl_getinfo($curl,CURLINFO_HEADER_OUT);
  $response_code = curl_getinfo($curl,CURLINFO_HTTP_CODE);
  //$curl_effective_url = curl_getinfo($curl,CURLINFO_EFFECTIVE_URL);
  curl_close($curl);
  // Return the Location in the header
  if ($result) {
    $response_header = http_parse_headers($result);
    $location = $response_header['Location'];
    if (!empty($location)) {
      switch ($response_code) {
        case '200':
          $response['success'] = $location;
          break;
        case '301':
        case '302':
          // Recursion!
          $redirect_counter++;
          $response = htaccess_checker_check_redirect($location, $redirect_counter);
          break;
        default:
          $response['error'] = t('Location found, but with error ' . $src . '.');
          break;
      }
    }
    else {
      if (isset($response_header['Content-Language'])) {
        // Make sure it's not nginx, aka Acquia
        if ('Apache' !== substr($response_header['Server'],0,6)) {
          1===1;
        }
        else {
          $response['Server'] = 'Apache';
        }
        $response['success'] = $src;
      }
      else {
        $response['error'] = t('No Location in response header for source ' . $src . '.');
      }
    }
  }
  else {
    $response['error'] = t('No curl response ' . $src . '.');
  }

  // pass along the request headers
  $response['request_header'] = $request_header;
  $response['response_header'] = $response_header;

  return $response;
}

/**
 * Check for string replacements against the {lang-prefix} and {lang-domain}
 *
 * @param $src
 * @param $tgt
 * @return array|null
 */
function htaccess_checker_string_replace($src, $tgt) {

  $languages = language_list('enabled')[1];

  $new_array = array();

  // If anything has to be language-replaced, an array for every language has to be created.
  if (strpos($src,'{lang-prefix}') || strpos($tgt,'{lang-prefix}') || strpos($src,'{lang-domain}') || strpos($tgt,'{lang-domain}')) {
    foreach ($languages as $lang) {
      $new_array[$lang->language]['src'] = $src;
      $new_array[$lang->language]['tgt'] = $tgt;
    }
  }
  else {
    // If no string replacements are needed,
    return null;
  }

  /////////////////////////
  // STRING REPLACEMENTS //
  /////////////////////////

  // Lang prefix
  if (strpos($src,'{lang-prefix}')) {
    foreach ($languages as $i => $lang) {
      $new_array[$lang->language]['src'] = str_replace('{lang-prefix}', $lang->prefix, $new_array[$lang->language]['src']);
    }
  }
  if (strpos($tgt,'{lang-prefix}')) {
    foreach ($languages as $i => $lang) {
      $new_array[$lang->language]['tgt'] = str_replace('{lang-prefix}', $lang->prefix, $new_array[$lang->language]['tgt']);
    }
  }

  // Lang domain
  // Get any custom domains to verify against
  $domains = variable_get('htaccess_checker_domains');
  if (strpos($src,'{lang-domain}')) {
    foreach ($languages as $i => $lang) {
      if (!empty($domains[$lang->language])) {
        $lang_domain = $domains[$lang->language];
      }
      $new_array[$lang->language]['src'] = str_replace('{lang-domain}',$lang_domain,$new_array[$lang->language]['src']);
    }
  }
  if (strpos($tgt,'{lang-domain}')) {
    foreach ($languages as $i => $lang) {
      if (!empty($domains[$lang->language])) {
        $lang_domain = $domains[$lang->language];
      }
      $new_array[$lang->language]['tgt'] = str_replace('{lang-domain}',$lang_domain,$new_array[$lang->language]['tgt']);
    }
  }

  // Lang code (for node edit pages)
  if (strpos($src,'{lang-code}')) {
    foreach ($languages as $i => $lang) {
      $new_array[$lang->language]['src'] = str_replace('{lang-code}', $lang->language, $new_array[$lang->language]['src']);
    }
  }
  if (strpos($tgt,'{lang-code}')) {
    foreach ($languages as $i => $lang) {
      $new_array[$lang->language]['tgt'] = str_replace('{lang-code}', $lang->language, $new_array[$lang->language]['tgt']);
    }
  }

  return $new_array;
}

function htaccess_checker_result_compare($src, $tgt, &$commands, $i) {
  // Where to place the ajax response
  // $element = '#result_' . $i;
  $element = '#htaccess-checker-redirect-table';
  // Set the url to localhost IP.
  // We mask the hostname in the request header

  // Check the Location and response code of the redirect
  $response = htaccess_checker_check_redirect($src);
  if (isset($response['error'])) {
    $commands[] = ajax_command_append($element, '<li class="fail">' . $response['error'] . '</li>');
  }
  elseif (isset($response['success'])) {
    $curl_effective_url = $response['success'];
  }

  // Ignore trailing slash for string comparison
  if (substr($tgt, -1) !== '/') {
    $tgt = $tgt . '/';
  }
  if (substr($curl_effective_url, -1) !== '/') {
    $curl_effective_url = $curl_effective_url . '/';
  }

  // Header Information?
  if (isset($response['request_header'])) {
    //if ()
    1===1;
  }

  // String comparison
  if ($tgt == $curl_effective_url) {
    $commands[] = ajax_command_append($element, '<li class="success">Success: ' . $src . ' redirected to ' . $curl_effective_url . '</li>');
  }
  elseif ($src == $curl_effective_url) {
    $commands[] = ajax_command_append($element, '<li class="no-redirect">No Redirect: ' . $src . ' Redirected to ' . $curl_effective_url . '</li>');
  }
  else {
    $commands[] = ajax_command_append($element, '<li class="fail">Fail: ' . $src . ' redirected to ' . $curl_effective_url . '</li>');
  }

  return $commands;
}

/**
 * Helper function for parsing headers
 * Taken from http://php.net/manual/en/function.http-parse-headers.php
 */
if (!function_exists('http_parse_headers'))
{
  function http_parse_headers($raw_headers)
  {
    $headers = array();
    $key = ''; // [+]

    foreach(explode("\n", $raw_headers) as $i => $h)
    {
      $h = explode(':', $h, 2);

      if (isset($h[1]))
      {
        if (!isset($headers[$h[0]]))
          $headers[$h[0]] = trim($h[1]);
        elseif (is_array($headers[$h[0]]))
        {
          // $tmp = array_merge($headers[$h[0]], array(trim($h[1]))); // [-]
          // $headers[$h[0]] = $tmp; // [-]
          $headers[$h[0]] = array_merge($headers[$h[0]], array(trim($h[1]))); // [+]
        }
        else
        {
          // $tmp = array_merge(array($headers[$h[0]]), array(trim($h[1]))); // [-]
          // $headers[$h[0]] = $tmp; // [-]
          $headers[$h[0]] = array_merge(array($headers[$h[0]]), array(trim($h[1]))); // [+]
        }

        $key = $h[0]; // [+]
      }
      else // [+]
      { // [+]
        if (substr($h[0], 0, 1) == "\t") // [+]
          $headers[$key] .= "\r\n\t".trim($h[0]); // [+]
        elseif (!$key) // [+]
          $headers[0] = trim($h[0]);trim($h[0]); // [+]
      } // [+]
    }

    return $headers;
  }
}
